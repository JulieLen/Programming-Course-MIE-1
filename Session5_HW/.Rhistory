reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg <- function(n, Mu, Sig){
data <- mvrnorm(n, mu = Mu, Sigma = Sig)
Y <- data[,2]
X <- data[,1]
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
reg(50, c(2.0, 1.0), SIGMA)
View(data2)
out <- function(beta){
n <- sample(100:200, 1)
for(k in 1:I){
for(s in 1:I){
if(k == s){
Sig[k, s] <- 1
} else{
Sig[k, s] <- beta
}
}
}
for(j in (1:I)) {
Mu[j] <- sample(1:6, 1)
}
RS <- c(n, Mu, Sig)
return(RS)
}
out(0,5)
out(0.5)
Sig
varmat <- function(beta){
varmat <- matrix(0, ncol=5, nrow=5, byrow=T)
for(k in 1:I){
for(s in 1:I){
if(k == s){
varmat[k, s] <- 1
} else{
varmat[k, s] <- beta
}
}
}
return(varmat)
}
varmat(0.5)
reg <- function(n, Mu, varmat=function(B) B){
B <- runif(1)
data <- mvrnorm(n, mu = Mu, Sigma = varmat(B))
Y <- data[,2]
X <- data[,1]
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
reg(50, c(2.0, 1.0), 0.5)
reg <- function(n, Mu, varmat=function(B) B){
B <- runif(1)
V <- varmat(B)
data <- mvrnorm(n, mu = Mu, Sigma = V)
Y <- data[,2]
X <- data[,1]
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
reg(50, c(2.0, 1.0), 0.5)
varmat(0.5)
s <- varmat(0.5)
s
reg <- function(n, Mu, varmat=function(x) x){
x <- runif(1)
V <- varmat(x)
data <- mvrnorm(n, mu = Mu, Sigma = V)
Y <- data[,2]
X <- data[,1]
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
reg(50, c(2.0, 1.0), 0.5)
reg(50, c(2.0, 1.0), 0.5)
reg <- function(n, Mu, varmat=function(x) x{
data <- mvrnorm(n, mu = Mu, Sigma = varmat(x))
Y <- data[,2]
X <- data[,1]
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
reg <- function(n, Mu, varmat=function(x) x){
data <- mvrnorm(n, mu = Mu, Sigma = varmat(x))
Y <- data[,2]
X <- data[,1]
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
reg(50, c(2.0, 1.0), 0.5)
reg(50, c(2.0, 1.0), varmat(0,5))
reg(50, c(2.0, 1.0), varmat(0.5))
reg(50, c(2.0, 1.0), varmat(0.5) 0.5)
}
reg <- function(n, Mu, varmat=function(x) x){
x <- runif(1)
data <- mvrnorm(n, mu = Mu, Sigma = varmat(x))
Y <- data[,2]
X <- data[,1]
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
reg(50, c(2.0, 1.0))
reg <- function(n, Mu, S varmat=function(x) x){
x <- runif(1)
S <- varmat(x)
data <- mvrnorm(n, mu = Mu, Sigma = S)
Y <- data[,2]
X <- data[,1]
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
reg(50, c(2.0, 1.0))
reg <- function(n, Mu, S, varmat=function(x) x){
x <- runif(1)
S <- varmat(x)
data <- mvrnorm(n, mu = Mu, Sigma = S)
Y <- data[,2]
X <- data[,1]
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
reg(50, c(2.0, 1.0))
reg(50, c(2.0, 1.0), matrix(0, ncol=5, nrow=5, byrow=T))
reg <- function(n, Mu, Sig){
data <- mvrnorm(n, mu = Mu, Sigma = Sig)
Y <- data[,2]
x <- data[,1]
X <- cbind(one,x)
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
reg2 <- function(n, Mu, Sig){
data <- mvrnorm(n, mu = Mu, Sigma = Sig)
Y <- data[,2]
x <- data[,1]
X <- cbind(one,x)
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
reg1(50, c(2.0,1.0))
reg1 <- function(n, Mu, varmat=function(x) x){
x <- runif(1)
data <- mvrnorm(n, mu = Mu, Sigma = varmat(x))
Y <- data[,2]
X <- data[,1]
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
reg1(50, c(2.0,1.0))
reg1 <- function(n, Mu, varmat=function(x) x){
data <- mvrnorm(n, mu = Mu, Sigma = varmat(x))
Y <- data[,2]
X <- data[,1]
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
reg1(50, c(2.0,1.0), 0.5)
varmat(0.8)
reg1(50, c(2.0,1.0), varmat(0.5))
reg1 <- function(n, Mu, varmat=function(x) x){
S <- varmat(x)
data <- mvrnorm(n, mu = Mu, Sigma = S
Y <- data[,2]
X <- data[,1]
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
reg1 <- function(n, Mu, varmat=function(x) x){
S <- varmat(x)
data <- mvrnorm(n, mu = Mu, Sigma = S)
Y <- data[,2]
X <- data[,1]
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
reg1(50, c(2.0,1.0), varmat(0.5))
reg1(50, c(2.0,1.0), 0.5)
reg <- function(n, Mu, Sig){
data <- mvrnorm(n, mu = Mu, Sigma = Sig)
Y <- data[,2]
X <- data[,1]
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
reg(50, c(2.0, 1.0), SIGMA)
reg4(5,6)
reg4 <- function(x, y){
return(x+y)
}
reg4(5,6)
reg2(50, c(2.0,1.0), SIGMA)
plot(data)
abline(lm(data[,2]~data[,1]), col="green") # regression line (y~x)
abline(a=Beta[1], b=Beta[2], col="blue")
beta = 0.5
SIGMA = matrix(c(1,beta,beta,1), ncol=2)
MU = c(2.0, 1.0)
# Second, we set the sample size
N = 50
# Third, we draw your sample
data <- mvrnorm(N, mu = MU, Sigma = SIGMA)
dim(data)
data[1:10,]
plot(data)
abline(lm(data[,2]~data[,1]), col="green")
# Now we build our regression model.
# First, we define Y and X
y <- data[, 2]
X <- data [, 1]
# Now we want to go to Xa
# To do this we will create a vector of dim 10 with only ones which we are
# going to merge with the X vector to obtain the 2x10 matrix Xa
one <- c(rep(1, 50))
Xa <- cbind(one, X)
# Now we can use the formula and do the computations. Instead of giving a
# single value for beta, it is going to be a vector with
# 2 components : ß_0 and ß_1 :
XaT = t(Xa)
XaTXa = XaT%*%Xa
invXaTXa = solve(XaTXa)
XaTy = XaT%*%y
Beta = invXaTXa %*% XaTy
Beta
Beta[2]
# Now add this line to the plot
plot(data)
abline(lm(data[,2]~data[,1]), col="green") # regression line (y~x)
abline(a=Beta[1], b=Beta[2], col="blue")
plot(data)
abline(lm(data[,2]~data[,1]), col="green")
abline(a=Beta[1], b=Beta[2], col="blue")
regression_beta <- function(MU, SIGMA, N){
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
y <- out[, lenght(MU)]
X <- cbind(rep(1, N), out[, 1: lenght(MU)-1)
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
regression_beta <- function(MU, SIGMA, N){
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
y <- out[, lenght(MU)]
X <- cbind(rep(1, N), out[, 1: lenght(MU)-1)
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
regression_beta <- function(MU, SIGMA, N){
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
y <- out[, lenght(MU)]
X <- cbind(rep(1, N), out[, 1: lenght(MU)-1)
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
return(invXTX %*% XTy)
}
regression_beta <- function(MU, SIGMA, N){
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
y <- out[, lenght(MU)]
X <- cbind(rep(1, N), out[, 1: lenght(MU)-1)
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
return(invXTX %*% XTy)
}
regression_beta <- function(MU, SIGMA, N){
# Draw your sample
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
# Our data set is named `out`, which we split into y and X
y <- out[, 3]
X <- cbind(rep(1, N), out[, 1], out[, 2])
# Now carry out intermediate calculations
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
return(invXTX %*% XTy)
}
regression_beta <- function(MU, SIGMA, N){
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
y <- out[, lenght(MU)]
X <- cbind(rep(1, N), out[, 1: lenght(MU)-1))
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
return(invXTX %*% XTy)
}
regression_beta <- function(MU, SIGMA, N){
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
y <- out[, lenght(MU)]
X <- cbind(rep(1, N), out[, 1: lenght(MU)-1)])
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
return(invXTX %*% XTy)
}
regression_beta <- function(MU, SIGMA, N){
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
y <- out[, lenght(MU)]
X <- cbind(rep(1, N), out[, 1: lenght(MU)-1)])
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
regression_beta <- function(MU, SIGMA, N){
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
y <- out[, lenght(MU)]
X <- cbind(rep(1, N), out[, 1: (lenght(MU)-1)])
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
s1 <- 0.8
s2 <- 0.6
s3 <- 0.3
SIGMA = matrix(c(1,s1, s2,
s1, 1, s3,
s2, s3, 1), ncol=3)
regression_beta{c(3.0, 2.0, 1.0), SIGMA, 100}
regression_beta(c(3.0, 2.0, 1.0), SIGMA, 100)
s1 <- 0.8
s2 <- 0.6
s3 <- 0.3
SIGMA = matrix(c(1,s1, s2,
s1, 1, s3,
s2, s3, 1), ncol=3)
SIGMA
MU = c(2.0, 1.0, 3.8)
# Set the sample size
N = 50
regression_beta(MU, SIGMA, N)
regression_beta <- function(MU, SIGMA, N){
# Draw your sample
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
# Our data set is named `out`, which we split into y and X
y <- out[, 3]
X <- cbind(rep(1, N), out[, 1], out[, 2])
# Now carry out intermediate calculations
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
return(invXTX %*% XTy)
}
regression_beta(MU, SIGMA, N)
regression_beta <- function(MU, SIGMA, N){
# Draw your sample
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
# Our data set is named `out`, which we split into y and X
y <- out[, 3]
X <- cbind(rep(1, N), out[, 1], out[, 2])
# Now carry out intermediate calculations
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
return(invXTX %*% XTy)
}
regression_beta(MU, SIGMA, N)
require(MASS)
regression_beta <- function(MU, SIGMA, N){
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
y <- out[, lenght(MU)]
X <- cbind(rep(1, N), out[, 1: (lenght(MU)-1)])
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
regression_beta(MU, SIGMA, N)
library("devtools")
# Change these to suit your needs
dir <- file:///Users/julielenoir/Documents/1%20-%20ScPo/16:18%20-%20MIE/Programming%20course/ProgrammingFall2016/
name <- 'PracticePackage'
# Create your package
setwd(dir)
create(name)
library("devtools")
install.packages("devtools",
repos='http://cran.us.r-project.org')
install.packages("testthat",
repos='http://cran.us.r-project.org')
install.packages("roxygen2",
repos='http://cran.us.r-project.org')
library("devtools")
# Change these to suit your needs
dir <- '~/Users/julielenoir/Documents/"1- ScPo"/ "16/18 - MIE"/Programmingcourse/ProgrammingFall2016/'
name <- 'PracticePackage'
# Create your package
setwd(dir)
create(name)
package.skeleton(name=name, path=dir)
dir <- '~/Users/julielenoir/Documents/"1- ScPo"/ "16/18 - MIE"/Programmingcourse/Week4/'
name <- 'Practice_Package'
package.skeleton(name=name, path=dir)
dir1 <- '~/Users/julielenoir/Documents/"1- ScPo"/ "16/18 - MIE"/Programmingcourse/Week4/'
name1 <- 'Practice_Package'
setwd(dir1)
create(name1)
# Create your package
package.skeleton(name=name1, path=dir1)
dir1 <- '~/Users/julielenoir/Documents/"1- ScPo"/ "16/18 - MIE"/Programmingcourse/Week4'
name1 <- 'Practice_Package'
setwd(dir1)
create(name1)
# Create your package
package.skeleton(name=name1, path=dir1)
library("devtools")
dir <- '~/Users/julielenoir/Desktop/R-package/'
name <- 'PracticePackage'
setwd(dir)
create(name)
package.skeleton(name=name, path=dir)
#### Session 5 ####
## ----> Correction for Homework 4
require(MASS)
# Set the correlation parameter and mean
s1 <- 0.8
s2 <- 0.6
s3 <- 0.3
SIGMA = matrix(c(1,s1, s2,
s1, 1, s3,
s2, s3, 1), ncol=3)
SIGMA
MU = c(2.0, 1.0, 3.8)
# Set the sample size
N = 50
regression_beta <- function(MU, SIGMA, N){
# Draw your sample
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
# Our data set is named `out`, which we split into y and X
y <- out[, 3]
X <- cbind(rep(1, N), out[, 1], out[, 2])
# Now carry out intermediate calculations
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
return(invXTX %*% XTy)
}
regression_beta(MU, SIGMA, N)
# PROBLEM : here it is not a general set up : it works only when
# we are in 3 dimensions
# To fix it :
regression_beta <- function(MU, SIGMA, N){
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
y <- out[, lenght(MU)]
X <- cbind(rep(1, N), out[, 1: (lenght(MU)-1)])
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
return(beta)
}
regression_beta(MU, SIGMA, N)
## ----> Session 5
install.packages("devtools",
repos='http://cran.us.r-project.org')
install.packages("testthat",
repos='http://cran.us.r-project.org')
install.packages("roxygen2",
repos='http://cran.us.r-project.org')
library("devtools")
dir <- '~/Users/julielenoir/Desktop/R-package/'
name <- 'PracticePackage'
package.skeleton(name=name, path=dir)
# Create your package
setwd(dir)
create(name)
install.packages("devtools", repos = "http://cran.us.r-project.org")
library("devtools")
pwd
pwd()
setwd('~/Users/julielenoir/Desktop/R-package/')
create("pack")
dir.create(paste(paste(dir, name, sep=""), "man", sep="/"))
dir.create(paste(name, "man", sep="/"))
library("devtools")
setwd("~/Documents/1 - ScPo/16:18 - MIE/Programming course/Programming-Course-MIE-1/Session5_HW")
create('JuliesPackage')
library(roxygen2)
document()
