lindirect_utility(12, 5, 1, 2, 1, 1)
install.packages("igraph", repos='https://cran.us.r-project.org')
install.packages("igraph", repos='http://cran.us.r-project.org')
A <- matrix(c(0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0, nrow=4 ))
library('igraph')
View(A)
A <- matrix(c(0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0),nrow=4 )
View(A)
a1 <-c(0,1,1,1)
a2 <-c(1,0,0,0)
A1 <- cbind(a1, a2, a2, a2)
A1
A2 <- matrix(0, nrow=n, ncol=n)
n <- 4
A2 <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
for(j in 1:n){
if(i!=j){
if (i==1 | j==1){
A[i,j] <- 1
}
}
}
}
A2
n <- 4
A2 <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
for(j in 1:n){
if(i!=j){
if (i==1 | j==1){
A[i,j] <- 1
}
}
}
}
A2
n <- 4
A2 <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
for(j in 1:n){
if(i!=j){
if (i == 1 | j == 1){
A[i, j] <- 1
}
}
}
}
A2
n <- 4
A2 <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
for(j in 1:n){
if(i!=j){
if (i == 1 | j == 1){
A2[i, j] <- 1
}
}
}
}
A2
n <- 4
A3 <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
for(j in 1:n){
if(i!=j & (i == 1 | j == 1)){
A3[i, j] <- 1
}
}
}
A3
plot(graph_from_adjacency_matrix(A3))
n <- 4
p <- 0.5
EAM1 <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
for(j in 1:n){
if(i!=j {
if(runif(1) <= p){
EAM1[i, j] <- 1
}
}
}
}
for(i in 1:n){
for(j in 1:n){
if(i!=j){
if(runif(1) <= p){
EAM1[i, j] <- 1
}
}
}
}
EAM1
n <- 4
p <- 0.5
EAM2 <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
for(j in 1:n){
if(i>j){
if(runif(1) <= p){
EAM2[i, j] <- 1
}
}
}
}
EAM2
n <- 4
p <- 1.0
EAM2 <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
for(j in 1:i){
if(i != j){
if(runif(1) <= p){
EAM2[i, j] <- 1
}
}
}
}
EAM2
n <- 4
p <- 1.0
EAM2 <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
for(j in 1:n){
if(i > j){
if(runif(1) <= p){
EAM2[i, j] <- 1
}
}
}
}
EAM2
EAM3 <- EAM2+t(EAM2)
EAM3
as.integer(runif(3) <= p)
as.integer(runif(3) <= p)
as.integer(runif(3) <= p)
as.integer(runif(3) <= p)
p <- 0.5
as.integer(runif(3) <= p)
as.integer(runif(3) <= p)
as.integer(runif(3) <= p)
as.integer(runif(3) <= p)
as.integer(runif(3) <= p)
as.integer(runif(3) <= p)
p <- 1.0
n <- 4
# set up a Boolean that creates random vectors of 0 and 1
as.integer(runif(3) <= p)
# put it into the loop
EAM4 <- matrix(0, nrow=n, ncol=n)
for(i in 2:n){
EAM4[i, 1:(i-1)] <- as.integer(runif(3) <= p)
}
EAM4
for(i in 2:n){
EAM4[i, 1:(i-1)] <- as.integer(runif(i-1) <= p)
}
EAM4
EAM44 <- EAM4+t(EAM4)
EAM44 <- EAM4+ t(EAM4)
EAM44
n <- 4
p <- 1.0
B <- matrix(0, nrow=n, ncol=n)
sample(c(0,1), size=as.integer(n*(n-1)/2),
replace = T, prob = c(1-p,p))
n <- 4
p <- 0.5
B <- matrix(0, nrow=n, ncol=n)
sample(c(0,1), size=as.integer(n*(n-1)/2),
replace = T, prob = c(1-p,p))
n <- 4
p <- 0.5
B <- matrix(0, nrow=n, ncol=n)
sample(c(0,1), size=as.integer(n*(n-1)/2),
replace = T, prob = c(1-p,p))
n <- 4
p <- 0.5
B <- matrix(0, nrow=n, ncol=n)
sample(c(0,1), size=as.integer(n*(n-1)/2),
replace = T, prob = c(1-p,p))
n <- 4
p <- 0.5
B <- matrix(0, nrow=n, ncol=n)
sample(c(0,1), size=as.integer(n*(n-1)/2),
replace = T, prob = c(1-p,p))
n <- 4
p <- 0.5
B <- matrix(0, nrow=n, ncol=n)
sample(c(0,1), size=as.integer(n*(n-1)/2),
replace = T, prob = c(1-p,p))
n <- 4
p <- 0.5
B <- matrix(0, nrow=n, ncol=n)
sample(c(0,1), size=as.integer(n*(n-1)/2),
replace = T, prob = c(1-p,p))
n <- 4
p <- 0.5
B <- matrix(0, nrow=n, ncol=n)
sample(c(0,1), size=as.integer(n*(n-1)/2),
replace = T, prob = c(1-p,p))
B[lower.tri(B)] <- temp
n <- 4
p <- 0.5
B <- matrix(0, nrow=n, ncol=n)
temp <- sample(c(0,1), size=as.integer(n*(n-1)/2),
replace = T, prob = c(1-p,p))
B[lower.tri(B)] <- temp
B
n <- 4
p <- 0.5
B <- matrix(0, nrow=n, ncol=n)
B[lower.tri(B)]  <- sample(c(0,1), size=as.integer(n*(n-1)/2),
replace = T, prob = c(1-p,p))
B <- B + t(B)
B
n <- 4
p <- 0.5
B <- matrix(0, nrow=n, ncol=n)
B[lower.tri(B)]  <- sample(c(0,1), size=as.integer(n*(n-1)/2),
replace = T, prob = c(1-p,p))
B <- B + t(B)
B
n <- 4
p <- 0.5
B <- matrix(0, nrow=n, ncol=n)
B[lower.tri(B)]  <- sample(c(0,1), size=as.integer(n*(n-1)/2),
replace = T, prob = c(1-p,p))
B <- B + t(B)
B
require(tictoc)
tic()
for(i in 2:n){
for(j in 1:i-1){
if(runif(1) <= p){
EAM2[i, j] <- 1
}
}
}
toc()
require(tictoc)
library('tictoc')
install.packages("tictoc", repos='http://cran.us.r-project.org')
require('tictoc')
tic()
for(i in 2:n){
for(j in 1:i-1){
if(runif(1) <= p){
EAM2[i, j] <- 1
}
}
}
toc()
tic()
for(i in 2:n){
for(j in 1:i-1){
if(runif(1) <= p){
EAM2[i, j] <- 1
}
}
}
toc()
tic()
B[lower.tri(B)]  <- sample(c(0,1), size=as.integer(n*(n-1)/2),
replace = T, prob = c(1-p,p))
toc()
setwd("~/Documents")
setwd("~/Documents/1 - ScPo/16:18 - MIE/Programming course/Programming-Course-MIE-1")
college <- read.csv("~/Documents/1 - ScPo/16:18 - MIE/Programming course/the-history-of-baseball/college.csv")
View(college)
columnnames(college)
colnames(college)
print colnames(college)
print(colnames(college))
summary(college)
player <- read.csv("~/Documents/1 - ScPo/16:18 - MIE/Programming course/the-history-of-baseball/player.csv")
View(player)
batting <- read.csv("~/Documents/1 - ScPo/16:18 - MIE/Programming course/the-history-of-baseball/batting.csv")
View(batting)
salary <- read.csv("~/Documents/1 - ScPo/16:18 - MIE/Programming course/the-history-of-baseball/salary.csv")
View(salary)
summary(salary[year])
summary(salary[,1])
player1 <- player[, 1, 2, 12]
player1 <- player[, "player_id" "birht_year" "hr"]
player1 <- player[, "player_id", "birth_year", "hr"]
player1 <- cbind(player[,"player_id"], player["birth_year"], player["hr"])
player1 <- cbind(player[,"player_id"], player[,"birth_year"], player[,"hr"])
head(player[,"player_id"])
A <- player[,"player_id"]
A <- player[,"player_id"]A
a
A
B <- player[, "birth_year"]
C <- player[,"hr"]
player1 <- cbind(player[,"player_id"], player[,"birth_year"])
batting1 <- cbind(batting[,"player_id"], batting[,"hr"])
baseball <- merge (player1, batting1, salary, by="player_id", all=TRUE)
baseball <- merge (player1, batting1, salary, by='player_id', all=TRUE)
baseball <- merge (player1, batting1, salary, by='player_id')
baseball <- merge (player1, batting1, salary)
baseball <- merge(player1, batting1, salary)
baseball <- merge(player1, batting1, salary, by=0)
baseball <- merge(player1, batting1, salary, by=0, all=TRUE)
View(batting1)
View(player1)
names(player1) <- c("player_id", "birth_year")
View(player1)
names(player1) <- c("player_id", "birth_year")
View(player1)
View(player1)
player1 <- cbind(player[,"player_id"], player[,"birth_year"])
View(player1)
player1 <- cbind(player[,"player_id"], player[,"birth_year"])
View(player1)
player1 <- subset(player, select=c("player_id", "birth_year"))
View(player1)
batting1 <- subset(batting, select=c("player_id", "hr"))
View(salary)
baseball <- merge(player1, batting1, salary, by=0, all=TRUE)
baseball <- merge(player1, batting1, salary, by="player_id", all=TRUE)
baseball <- merge(player1, batting1, salary, by.x="player_id", all=TRUE)
baseball <- merge(player1, batting1, salary)
baseball <- cbind(player1, batting1, salary)
movie_metadata <- read.csv("~/Documents/1 - ScPo/16:18 - MIE/Programming course/movie_metadata.csv")
View(movie_metadata)
movie <- read.csv("~/Documents/1 - ScPo/16:18 - MIE/Programming course/movie_metadata.csv")
View(movie)
colnames(movie)
summary(movie[,"facenumber_in_poster"])
summary(movie[,"title_year"])
summary(movie[,"imdb_scores"])
summary(movie[,"imdb_score"])
type <- c(0, T=5043)
type
type <- c(0)
type <- c(rep(0), 5043)
type
type <- c(rep(0), T=5043)
type
type <- c(rep(0), dim=c(1,5043))
type <- vector(mode="numeric", 5043)
i<-1
}
}}
}
if(movie[i,"imdb_score"]< 5.8){
type[i] <- "0"
} else if(5.8 < movie[i,"imdb_score"]< 7.2) {
type[i] <- "1"
} else {
type[i] <- "2"
}
if(movie[i,"imdb_score"]< 5.8){
type[i] <- 0
} else if(5.8 < movie[i,"imdb_score"]< 7.2) {
type[i] <- 1
} else {
type[i] <- 2
}
if(movie[i,"imdb_score"]< 5.8){
type[i] <- 0
} else {
type[i] <- 1
}
type
while(i<5044) {
if(movie[i,"imdb_score"]< 5.8){
type[i] <- 0
} else {
type[i] <- 1
}
i <- i+1
}
type
while(i<5044) {
if(movie[i,"imdb_score"]< 5.8){
type[i] <- 0
} else if(movie[i,"imdb_score"] > 7.2)) {
type[i] <- 2
} else {
type[i] <- 1
}
i <- i+1
}
while(i<5044) {
if(movie[i,"imdb_score"]< 5.8){
type[i] <- 0
} else if(movie[i,"imdb_score"] > 7.2) {
type[i] <- 2
} else {
type[i] <- 1
}
i <- i+1
}
type
hist(movie[,"imdb_score"])
type
while(i<5044) {
if(movie[i,"imdb_score"]< 5.8){
type[i] <- 0
} else if(movie[i,"imdb_score"] > 7.2) {
type[i] <- 2
} else {
type[i] <- 1
}
i <- i+1
}
head(type)
type
while(i<5044) {
if(movie[i,"imdb_score"]<5.8){
type[i] <- 0
} else if(movie[i,"imdb_score"]>7.2) {
type[i] <- 2
} else {
type[i] <- 1
}
i <- i+1
}
head(type)
while(i<5044) {
if(movie[i,"imdb_score"]>7.2){
type[i] <- 2
} else {
type[i] <- 1
}
i <- i+1
}
head(type)
movie[1, "imdb_score"]
type1 <- rep(0, 5043)
while(i<5044) {
if(movie[i,"imdb_score"]>7.2){
type1[i] <- 2
} else {
type1[i] <- 1
}
i <- i+1
}
head(type1)
i<-1
while(i<5044) {
if(movie[i,"imdb_score"]>7.2){
type1[i] <- 2
} else {
type1[i] <- 1
}
i <- i+1
}
type <- rep(0, 5043)
type <- rep(0, 5043)
i<-1
while(i<5044) {
if(movie[i,"imdb_score"]<5.8){
type[i] <- 0
} else if(movie[i,"imdb_score"]>7.2) {
type[i] <- 2
} else {
type[i] <- 1
}
i <- i+1
}
head(type)
cbind(movie, type)
cbind(movie, type)
View(movie)
movies <- cbind(movie, type)
View(movies)
mean(movie2[,"title_year"], by="type")
mean(movies[,"title_year"], by="type")
mean(movies[,"title_year"])
colMeans(movies[,"title_year"])
colMeans(movies[1:5043,"title_year"])
colMeans(movies)
colMeans(movies[,"budget"])
colMeans(movies[1:5043,"budget"])
sort(movies, by="type")
sort(movies, by="type", decreasing=FALSE)
mean(movies[1:5043,"budget"])
mean(movies[,"budget"])
type(movies[,"budget"])
typeof(2)
typeof(0)
typeof('blabla')
typeof(movies[1,"budget"])
z<-with(movies,mean("budget"))
summary(movies[,"budget"])
mean(movies[,"budget"])
mean(movies[,"imbd_score"])
movies[,"imbd_score"]
mean(movies[,"imdb_score"])
mean(movies[,"imdb_score"], by="type")
sort(movies, "type")
sort(movies, "type", decreasing=FALSE)
sort(movies, "type", decreasing=FALSE, na.last=na)
sort(movies, "type", decreasing=FALSE, na.last=NA)
sort(movies, decreasing=FALSE, na.last=NA)
sort(movies, decreasing=FALSE, na.last=TRUE)
sort(movies, "type", decreasing=FALSE, na.last=TRUE)
library(plyr)
arrange(movies,"type")
arrange(movies, type)
mean(movies[,"imdb_score"], by="type")
aggregate(movies[, "budget"], list(movies$type), mean)
aggregate(movies[, "budget":"title_year"], list(movies$type), mean)
aggregate(movies[, "budget"], list(movies$type), mean)
ddply(movies, .(type), summarize,  budget=mean(budget), imdb_score=mean(imdb_score))
ddply(movies, .(type), summarize, budget=mean("budget"), imdb_score=mean(imdb_score))
ddply(movies, .(type), summarize, budget=mean(budget), imdb_score=mean(imdb_score))
